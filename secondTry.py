# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'secondTry.ui'
#
# Created by: PyQt5 UI code generator 5.14.0
#
# WARNING! All changes made in this file will be lost!

#run this with sudo -E python3 secondTry.py


import sys
import os
from tkinter.tix import Tree
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from my_app import *
from PyQt5.QtWidgets import QMessageBox, QWidget
from PyQt5.Qt import QStandardItemModel, QStandardItem
from PyQt5.QtGui import QFont, QColor, QMovie, QPixmap, QPainter

activeIPs = []
foundIPs = []
foundPorts = []
portsDictionary = {}

class StandardItem(QStandardItem):
    def __init__(self, txt='', font_size=12, set_bold=False, color=QColor(0,0,0)):
        super().__init__()

        fnt = QFont('Open Sans', font_size)
        fnt.setBold(set_bold)

        self.setEditable(False)
        self.setForeground(color)
        self.setFont(fnt)
        self.setText(txt)

    def getText(self):
        return self.text()

class LoadingScreen(QWidget):
    def __init__(self):
        super().__init__()
        self.setFixedSize(441,221)
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.CustomizeWindowHint)

        self.label_animation = QtWidgets.QLabel(self)
        self.movie = QMovie('Loading_icon.gif')
        self.label_animation.setMovie(self.movie)

        
    
    def startAnimation(self):
        self.movie.start()
        self.show()

    def stopAnimation(self):
        self.movie.stop()
        self.close()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(657, 455)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #grid layout for input
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(20, 30, 261, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")

        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        #input field for network to scan
        self.inputNetwork = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.inputNetwork.setObjectName("inputNetwork")
        self.gridLayout.addWidget(self.inputNetwork, 1, 0, 1, 2)

        self.networkLabel = QtWidgets.QLabel(self.gridLayoutWidget)
        self.networkLabel.setObjectName("networkLabel")
        self.gridLayout.addWidget(self.networkLabel, 0, 0, 1, 2)

        #button for submitting network to scan
        self.submitNetworkButton = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.submitNetworkClick())
        self.submitNetworkButton.setObjectName("submitNetworkButton")
        self.gridLayout.addWidget(self.submitNetworkButton, 2, 1, 1, 1)

        #tree view of the active ips
        self.treeView = QtWidgets.QTreeView(self.centralwidget)
        self.treeView.setGeometry(QtCore.QRect(310, 30, 301, 311))
        self.treeView.setObjectName("treeView")
        self.treeView.setHeaderHidden(True)
        self.treeModel = QStandardItemModel()
        self.rootNode = self.treeModel.invisibleRootItem()
        self.treeView.doubleClicked.connect(self.doubleClickOnValueFromTree)

        self.scanButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.scanPortsClick())
        self.scanButton.setGeometry(QtCore.QRect(520, 340, 89, 25))
        self.scanButton.setObjectName("scanButton")
        self.scanButton.hide()

        #response on network input
        self.networkValidationLabel = QtWidgets.QLabel(self.centralwidget)
        self.networkValidationLabel.setGeometry(QtCore.QRect(20, 110, 261, 51))
        self.networkValidationLabel.setWordWrap(True)
        self.networkValidationLabel.setObjectName("networkValidationLabel")

        self.loadingLabel = QtWidgets.QLabel(self.centralwidget)
        self.loadingLabel.setGeometry(QtCore.QRect(20,190, 100, 100))
        self.loadingLabel.setObjectName("loadingLabel")
        self.movie = QMovie('loading.gif')
        self.movie.setScaledSize(QSize().scaled(100, 100, Qt.KeepAspectRatio))
        #self.loadingLabel.setMovie(self.movie)
        self.loadingLabel.setText("Scanning. Please wait")
        self.loadingLabel.adjustSize()
        self.loadingLabel.hide()

        # self.loadingSpinner = Spinner(self.centralwidget)
        # self.loadingSpinner.setGeometry(QtCore.QRect(20, 190, 400, 200))

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 675, 22))
        self.menubar.setObjectName("menubar")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Loading screen
        self.loading_screen = LoadingScreen()
        

    def startLoadingAnimation(self):
        #self.movie.start()
        self.loadingLabel.show()

    def stopLoadingAnimation(self):
        #self.movie.stop()
        self.loadingLabel.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.networkLabel.setText(_translate("MainWindow", "Input your network here:"))
        self.submitNetworkButton.setText(_translate("MainWindow", "Submit"))
        self.scanButton.setText(_translate("MainWindow", "Scan"))
        self.networkValidationLabel.setText(_translate("MainWindow", ""))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))

    #submit input network for validation as a network
    def submitNetworkClick(self):
        #self.treeView.reset()
        network = getInput(self.inputNetwork.text())
        if network == 0:
            self.networkValidationLabel.setText("Invalid IP address or network. Try again.")
            self.networkValidationLabel.adjustSize()
            self.networkValidationLabel.repaint()
        else :
            self.networkValidationLabel.setText("Scanning network: " + str(network))
            self.inputNetwork.setText("")
            self.networkValidationLabel.adjustSize()
            self.networkValidationLabel.repaint()
            self.startNetworkScan(network)
    
    def reportNetworkScanProgress():
        pass

    def networkScanDone(self):
        j = 0
        for i in activeIPs or []:
            foundIPs.append(StandardItem(str(i), 11, set_bold=True))
            self.rootNode.appendRow(foundIPs[j])
            j += 1

        if activeIPs == None:
            self.show_popup('No active IPs found on given network', 'Scan results', 'info')
        else:
            self.show_popup(f'Scan completed, {len(activeIPs)} open IPs found.', 'Scan results', 'info')
        self.treeView.setModel(self.treeModel)
        self.treeView.expandAll()

        print(activeIPs)
        self.networkValidationLabel.setText("")
        self.networkValidationLabel.adjustSize()
        self.networkValidationLabel.repaint()
    #do a ping sweep on the network
    def startNetworkScan(self, network):
        global activeIPs
        self.startLoadingAnimation()

        #spinner = Spinner()
        #Here trying to run network scan on a worker on a different thread.
        self.thread = QThread()
        self.worker = NetworkScanWorker(1)
        self.worker.moveToThread(self.thread)

        # self.thread.started.connect(
        #     self.startLoadingAnimation
        # )
        self.thread.started.connect(
            lambda: self.worker.run(network)
            )
        
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.worker.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.reportNetworkScanProgress)
        self.worker.finished.connect(self.stopLoadingAnimation)
        self.worker.finished.connect(self.networkScanDone)


        self.submitNetworkButton.setEnabled(False)
        self.thread.finished.connect(
            lambda:
                self.submitNetworkButton.setEnabled(True)
        )
        
        self.thread.start()
        
        #activeIPs = doPingSweep(network)


    def doubleClickOnValueFromTree(self, val):
        self.treeView.collapseAll()
        #TODO: make it such that a scan won't happen twice on the same IP, just store information
        #TODO: add something that makes it suggestible that something is LOADING
        print('DOUBLE CLICKED A TREE VALUE')
        print('Data in tree value: ', val.data())
        print('Row that was clicked: ', val.row())
        print('Column that was clicked: ', val.column())
        match val.column():
            case 0:
                self.scanPortsClick(val.data())
            case 1:
                pass
                #TODO: what to do on a double click of a port.
            case 2:
                pass
                #TODO: what to do on a double click of a detail of a port
            case default:
                pass


    #save ports scan result
    def portScanDone(self, selected):
        global portsDictionary, foundIPs, foundPorts

        if portsDictionary != None:
            self.show_popup(f"Ports scan complete. Found {len(portsDictionary)} open ports.", "Scan Results", "info")
        else:
            self.show_popup("Ports scan complete. No ports found.", "Scan Results", "info")


        for ip in foundIPs:
            if (ip.getText() == selected):
                selectedIp = ip
                break
        j = len(foundPorts)
        for port in portsDictionary or []:

            foundPorts.append(StandardItem(str(port[1]), 10))
            selectedIp.appendRow(foundPorts[j])
            foundPorts[j].appendRow(StandardItem("name: " + str(port[0]['name']), 10))
            foundPorts[j].appendRow(StandardItem("state: " + str(port[0]['state']), 10))
            foundPorts[j].appendRow(StandardItem("product: " + str(port[0]['product']), 10))
            foundPorts[j].appendRow(StandardItem("version: " + str(port[0]['version']), 10))
            foundPorts[j].appendRow(StandardItem("extrainfo: " + str(port[0]['extrainfo']), 10))

            j += 1

            #foundPorts.append()

    #click function for scan on specific ip to look for ports
    def scanPortsClick(self, selected):
        
        print(selected)
        # portsDictionary = scanPorts(selected)

        self.thread = QThread()
        self.worker = PortScannerWorker(2)
        self.worker.moveToThread(self.thread)

        self.thread.started.connect(
            lambda: self.worker.run(selected)
            )
        
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.worker.finished.connect(self.thread.deleteLater)
        self.worker.finished.connect(self.stopLoadingAnimation)
        self.worker.finished.connect(
            lambda: self.portScanDone(selected)
            )

        self.startLoadingAnimation()
        self.thread.start()


        
        
            
            
    #popup function, takes arg the message, title and icon style
    def show_popup(self, message, title, icon):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(message)
        match icon:
            case 'warning':
                msg.setIcon(QMessageBox.Warning)
            case 'info':
                msg.setIcon(QMessageBox.Information)
            case 'question':
                msg.setIcon(QMessageBox.Question)
            case default:
                pass

        msg.setStandardButtons(QMessageBox.Ok)

        x = msg.exec_()


#TODO: understand and build a working spinner for loading, maybe use threads
# make use of https://stackoverflow.com/questions/58799257/spinning-animation-while-another-process-is-running-in-pyqt
# tutorial: https://realpython.com/python-pyqt-qthread/


# current_folder = os.path.dirname(os.path.realpath(__file__))
# load_icon = os.path.join(current_folder, 'load_icon.png')
    
# class Spinner(QWidget):
#     def __init__(self, parent=None):
#         super().__init__(parent)
#         #self.setAlignment(QtCore.Qt.AlignCenter)
#         self.pixmap = QPixmap(load_icon)

#         self.setFixedSize(30, 30)
#         self._angle = 0

#         self.animation = QPropertyAnimation(self, b"angle", self)
#         self.animation.setStartValue(0)
#         self.animation.setEndValue(360)
#         self.animation.setLoopCount(-1)
#         self.animation.setDuration(2000)
#         self.animation.start()


#     @pyqtProperty(int)
#     def angle(self):
#         return self._angle

#     @angle.setter
#     def angle(self, value):
#         self._angle = value
#         self.update()


#     def paintEvent(self, ev=None):
#         painter = QPainter(self)
#         painter.translate(15, 15)
#         painter.rotate(self._angle)
#         painter.translate(-15, -15)
#         painter.drawPixmap(5, 5, self.pixmap)


# class loaderDialog(QWidget):
#     def __init__(self, parent=None):
#         super(loaderDialog, self).__init__(parent)
#         self.initUI()
#         self.thread = QThread(self)
#         self.worker = Worker()
#         self.worker.moveToThread(self.thread) # worker will be runned in another thread
#         self.worker.done.connect(self.load_data_to_tree) # Call load_data_to_tree when worker.done is emitted
#         self.thread.started.connect(self.worker.doWork) # Call worker.doWork when the thread starts
#         self.thread.start() # Start the thread (and run doWork)

class NetworkScanWorker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def __init__(self, id: int):
        super().__init__()
        self.__id = id
        self.__abort = False
    
    def run(self, network):
        global activeIPs
        activeIPs = doPingSweep(network)
        self.finished.emit()

class PortScannerWorker(QObject):
    finished = pyqtSignal()

    def __init__(self, id: int):
        super().__init__()
        self.__id = id
        self.__abort = False
    
    def run(self, selected):
        global portsDictionary
        portsDictionary = scanPorts(selected)
        self.finished.emit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'secondTry.ui'
#
# Created by: PyQt5 UI code generator 5.14.0
#
# WARNING! All changes made in this file will be lost!

#run this with sudo -E python3 secondTry.py


import sys
import os
import time
from tkinter.tix import Tree
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from my_app import *
from PyQt5.QtWidgets import QMessageBox, QWidget
from PyQt5.Qt import QStandardItemModel, QStandardItem
from PyQt5.QtGui import QFont, QColor, QMovie, QPixmap, QPainter
from functools import partial

activeIPs = []
foundIPs = []
foundPorts = []
portsDictionary = {}
portsToBeFurtherScanned = []


class StandardItem(QStandardItem):
    def __init__(self, txt='', font_size=12, set_bold=False, color=QColor(0,0,0)):
        super().__init__()

        fnt = QFont('Open Sans', font_size)
        fnt.setBold(set_bold)
        #paint = QPainter()
        #TODO: might be able to add a loading circle on each standard item with QSvgRenderer on a QPainter?
        self.setEditable(False)
        self.setForeground(color)
        self.setFont(fnt)
        self.setText(txt)

    def getText(self):
        try:
            return self.text()
        except Exception as ex:
            print("Cannot get text from StandardItem because of exception: ", ex)

def getIndex(li, target):
    for index, x in enumerate(li):
        if x.getText() == target:
            return index
    return -1

def printList(li, target):
    print("PRINTING FOUNDPORTS")
    for index, x in enumerate(li):
        print(x.getText())
    return -1

class LoadingScreen(QWidget):
    def __init__(self):
        super().__init__()
        self.setFixedSize(441,221)
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.CustomizeWindowHint)

        self.label_animation = QtWidgets.QLabel(self)
        self.movie = QMovie('Loading_icon.gif')
        self.label_animation.setMovie(self.movie)

        
    
    def startAnimation(self):
        self.movie.start()
        self.show()

    def stopAnimation(self):
        self.movie.stop()
        self.close()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(857, 555)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #grid layout for input
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(20, 30, 261, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")

        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        #input field for network to scan
        self.inputNetwork = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.inputNetwork.setObjectName("inputNetwork")
        self.gridLayout.addWidget(self.inputNetwork, 1, 0, 1, 2)

        self.networkLabel = QtWidgets.QLabel(self.gridLayoutWidget)
        self.networkLabel.setObjectName("networkLabel")
        self.gridLayout.addWidget(self.networkLabel, 0, 0, 1, 2)

        #button for submitting network to scan
        self.submitNetworkButton = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.submitNetworkClick())
        self.submitNetworkButton.setObjectName("submitNetworkButton")
        self.gridLayout.addWidget(self.submitNetworkButton, 2, 1, 1, 1)

        #tree view of the active ips
        self.treeView = QtWidgets.QTreeView(self.centralwidget)
        self.treeView.setGeometry(QtCore.QRect(310, 30, 401, 351))
        self.treeView.setObjectName("treeView")
        self.treeView.setHeaderHidden(True)
        self.treeView.setWordWrap(True)
        self.treeModel = QStandardItemModel()
        self.rootNode = self.treeModel.invisibleRootItem()
        self.treeView.doubleClicked.connect(self.doubleClickOnValueFromTree)
        self.treeView.setAnimated(True)
        
        #TODO: Put additional data like a pixmap on the treemodel: https://forum.qt.io/topic/53029/solved-how-can-i-get-row-and-col-of-my-child-in-qtreeview/9
        
        #response on network input
        self.networkValidationLabel = QtWidgets.QLabel(self.centralwidget)
        self.networkValidationLabel.setGeometry(QtCore.QRect(20, 110, 261, 51))
        self.networkValidationLabel.setWordWrap(True)
        self.networkValidationLabel.setObjectName("networkValidationLabel")

        self.loadingLabel = QtWidgets.QLabel(self.centralwidget)
        self.loadingLabel.setGeometry(QtCore.QRect(40,140, 200, 200))
        self.loadingLabel.setObjectName("loadingLabel")
        self.movie = QMovie('loading.gif')
        self.movie.setScaledSize(QSize().scaled(100, 100, Qt.KeepAspectRatio))
        self.loadingLabel.setMovie(self.movie)
        # self.loadingLabel.setText("Scanning. Please wait")
        # self.loadingLabel.adjustSize()
        self.loadingLabel.hide()

        self.fullScanCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.fullScanCheckBox.setGeometry(QtCore.QRect(20, 170, 201, 23))
        self.fullScanCheckBox.setObjectName("fullScanCheckBox")
        self.fullScanCheckBox.setText("Search all ports for a syn reply")
        self.fullScanCheckBox.adjustSize()

        self.detailedScanCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.detailedScanCheckBox.setGeometry(QtCore.QRect(20, 190, 201, 23))
        self.detailedScanCheckBox.setObjectName("detailedScanCheckBox")
        self.detailedScanCheckBox.setText("Check details after discovering ports")
        self.detailedScanCheckBox.adjustSize()

        # self.loadingSpinner = Spinner(self.centralwidget)
        # self.loadingSpinner.setGeometry(QtCore.QRect(20, 190, 400, 200))

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 675, 22))
        self.menubar.setObjectName("menubar")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Loading screen
        self.loading_screen = LoadingScreen()
        
    #############################################
    ######## START LOADING ANIMATION ############
    #############################################
    def startLoadingAnimation(self):
        self.movie.start()
        self.loadingLabel.show()
    #############################################
    ######## STOP LOADING ANIMATION ############
    #############################################
    def stopLoadingAnimation(self):
        self.movie.stop()
        self.loadingLabel.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.networkLabel.setText(_translate("MainWindow", "Input your network here:"))
        self.submitNetworkButton.setText(_translate("MainWindow", "Submit"))
        self.networkValidationLabel.setText(_translate("MainWindow", ""))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))

    #submit input network for validation as a network
    #########################################################
    ######## SUBMIT NETWORK FOR INPUT VALIDATION ############
    #########################################################
    def submitNetworkClick(self):
        #self.treeView.reset()
        network = getInput(self.inputNetwork.text())
        if network == 0:
            self.networkValidationLabel.setText("Invalid IP address or network. Try again.")
            self.networkValidationLabel.adjustSize()
            self.networkValidationLabel.repaint()
        else :
            self.networkValidationLabel.setText("Scanning network: " + str(network))
            self.inputNetwork.setText("")
            self.networkValidationLabel.adjustSize()
            self.networkValidationLabel.repaint()
            self.startNetworkScan(network)

    #############################################
    ######## RECIEVE NETWORK SCAN RESULTS########
    ######## ADD RESULTS TO TREE      ############
    #############################################
    def networkScanDone(self):
        j = 0
        for i in activeIPs or []:
            foundIPs.append(StandardItem(str(i), 11, set_bold=True))
            self.rootNode.appendRow(foundIPs[j])
            j += 1

        if activeIPs == None:
            self.show_popup('No active IPs found on given network', 'Scan results', 'info')
        else:
            self.show_popup(f'Scan completed, {len(activeIPs)} open IPs found.', 'Scan results', 'info')
        self.treeView.setModel(self.treeModel)
        self.treeView.expandAll()

        print(activeIPs)
        self.networkValidationLabel.setText("")
        self.networkValidationLabel.adjustSize()
        self.networkValidationLabel.repaint()
    #do a ping sweep on the network
    #############################################
    ######## START PING SWEEP OF NETWORK ########
    #############################################
    def startNetworkScan(self, network):
        global activeIPs
        self.startLoadingAnimation()
        #TODO: if starting a new scan, clear the treeview

        #spinner = Spinner()
        #Here trying to run network scan on a worker on a different thread.
        self.thread = QThread()
        self.worker = NetworkScanWorker(1)
        self.worker.moveToThread(self.thread)

        # self.thread.started.connect(
        #     self.startLoadingAnimation
        # )
        self.thread.started.connect(
            partial(self.worker.run, network)
            )
        
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.worker.finished.connect(self.thread.deleteLater)
        self.worker.finished.connect(self.stopLoadingAnimation)
        self.worker.finished.connect(self.networkScanDone)


        self.submitNetworkButton.setEnabled(False)
        self.thread.finished.connect(
            partial(self.submitNetworkButton.setEnabled, True)
        )
        
        self.thread.start()
        
        #activeIPs = doPingSweep(network)

    #############################################
    ######## DOUBLE CLICK ACTION ON TREE VALUES##
    #############################################
    def doubleClickOnValueFromTree(self, val):
        #self.treeView.collapseAll()
        #TODO: make it such that a scan won't happen twice on the same IP, just store information
        
        print(f"PRESSED on treeView column {val.column()}, row {val.row()} and value:{val.data()}f")

        firstParent = val.parent()
        if(firstParent.isValid()):
            grandParent = firstParent.parent()
            if(grandParent.isValid()):
                print("This has a grandparent!")
            else:
                print("THIS HAS A PARENT: ", val.parent())
                portsToBeFurtherScanned.append(int(val.data()))
                self.scanPortsDetails(firstParent.data())
        else:
            #TODO: add check to select if throrough scan of lots of ports or just a few.
            for ip in foundIPs:
                if (ip.getText() == val.data()):
                    selectedIp = ip
                    if(selectedIp.hasChildren()):
                        selectedIp.removeRows(0,selectedIp.rowCount())
                    break
            foundPorts.clear()
            self.scanPortsSyn(val.data())
        

    #TODO: GENERAL PROBLEM, DESTROYED WHYLE THREAD IS STILL RUNNING HAPPENING IRREGULARLY
    #save ports scan result
    #############################################
    ######## PORT SCAN DONE AND ADDED RESULTS TO TREE ############
    #############################################
    def portScanDone(self, selected, resetChildren=False):
        global portsDictionary, foundIPs, foundPorts, portsToBeFurtherScanned
        # if portsDictionary != None:
        #     self.show_popup(f"Ports scan complete. Found {len(portsDictionary)} open ports.", "Scan Results", "info")
        # else:
        #     self.show_popup("Ports scan complete. No ports found.", "Scan Results", "info")

        for ip in foundIPs:
            if (ip.getText() == selected):
                selectedIp = ip
                break
        j = len(foundPorts)

        for port in portsDictionary or []:
        #TODO: Find an appropriate way to scan for details, add another check maybe, maybe just run the detailed scan on all ports after first syn scan is done?
            if (port[0]['product'] != '' or port[0]['version'] != '' or port[0]['extrainfo'] != ''):
                # for item in self.treeModel.findItems(str(port[1])):
                #     print("FOUND should be removed")
                #     self.treeModel.removeRow(item.row())
                print(f"Looking for duplicates in foundPorts:")
                printList(foundPorts, 0)
                duplicateItemIndex = getIndex(foundPorts, str(port[1]))

                if(duplicateItemIndex != -1):
                    selectedIp.removeRow(duplicateItemIndex)
                    del foundPorts[duplicateItemIndex]
                    foundPorts.insert(duplicateItemIndex, StandardItem(str(port[1]), 10, set_bold=True))

                    selectedIp.insertRow(duplicateItemIndex, foundPorts[duplicateItemIndex])
                    foundPorts[duplicateItemIndex].appendRow(StandardItem("name: " + str(port[0]['name']), 10))
                    foundPorts[duplicateItemIndex].appendRow(StandardItem("state: " + str(port[0]['state']), 10))
                    if port[0]['product'] != '': foundPorts[duplicateItemIndex].appendRow(StandardItem("product: " + str(port[0]['product']), 10))
                    if port[0]['version'] != '': foundPorts[duplicateItemIndex].appendRow(StandardItem("version: " + str(port[0]['version']), 10))
                    if port[0]['extrainfo'] != '': foundPorts[duplicateItemIndex].appendRow(StandardItem("extrainfo: " + str(port[0]['extrainfo']), 10))
                    print (StandardItem("product: " + str(port[0]['product']), 10).getText())
                else:
                    foundPorts.append(StandardItem(str(port[1]), 10, set_bold=True))
                    selectedIp.appendRow(foundPorts[j])

                    foundPorts[j].appendRow(StandardItem("name: " + str(port[0]['name']), 10))
                    foundPorts[j].appendRow(StandardItem("state: " + str(port[0]['state']), 10))
                    if port[0]['product'] != '': foundPorts[j].appendRow(StandardItem("product: " + str(port[0]['product']), 10))
                    if port[0]['version'] != '': foundPorts[j].appendRow(StandardItem("version: " + str(port[0]['version']), 10))
                    if port[0]['extrainfo'] != '': foundPorts[j].appendRow(StandardItem("extrainfo: " + str(port[0]['extrainfo']), 10))
            else:
                try:

                    foundPorts.append(StandardItem(str(port[1]), 10))
                    selectedIp.appendRow(foundPorts[j])
                    foundPorts[j].appendRow(StandardItem("name: " + str(port[0]['name']), 10))
                    foundPorts[j].appendRow(StandardItem("state: " + str(port[0]['state']), 10))
                    if(str(port[0]['state']) == 'open' and self.detailedScanCheckBox.isChecked()):
                        portsToBeFurtherScanned.insert(0, port[1])
                except Exception as ex:
                    print(ex)

            self.treeView.resizeColumnToContents(0)
            self.treeView.resizeColumnToContents(2)
            self.treeView.resizeColumnToContents(3)
            self.treeView.resizeColumnToContents(4)

            j += 1
        # print(f"PORT:  80 exists  {foundPorts.count(StandardItem('80', 10))} times")

            #foundPorts.append()
        self.treeView.setModel(self.treeModel)
        self.treeView.expandToDepth(0)

    #click function for scan on specific ip to look for ports
    ###################################################################
    ######## START PORT SCAN OF ITEM DOUBLE CLICKED ON TREE ############
    #####################################################################
    def scanPortsSyn(self, selected):

        global portsToBeFurtherScanned
        print(selected)
        # portsDictionary = scanPorts(selected)

        self.thread = QThread()
        self.worker = PortScannerWorker(2)
        self.worker.moveToThread(self.thread)

        if (self.fullScanCheckBox.isChecked()):

            self.thread.started.connect(
                partial(self.worker.run, selectedIP=selected, portStart=1, portEnd=1000, scanArgs='-sS')
                )
        else:
            portList = '--top-ports 10 '
            print("TOP PORTS")
            self.thread.started.connect(
                partial(self.worker.run, selectedIP=selected, portList=portList, scanArgs='-sS')
                )
        #TODO: versiune care nu face full scan, acolo trebuie sa dau o lista de porturi mai cunoscute
        # verific daca nmapu poate sa ia lista de porturi si atunci trimit asa efectiv o lista de ints, hopefully
        # fac sa nu apara checkboxu numa dupa ce apar IPurile
        #dau start la scanu cu -sV si -A pe porturile gasite, dupa ce le gaseste
        
        # self.worker.finished.connect(self.thread.quit)
        self.worker.progress.connect(
                partial(self.portScanDone, selected)
                )
        # self.worker.finished.connect(self.worker.stop)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.thread.wait)

        

        self.worker.finished.connect(self.stopLoadingAnimation)
        
        self.worker.finished.connect(
            partial(self.scanPortsDetails, selected=selected)
        )
        self.startLoadingAnimation()
        self.thread.start()
            

    def scanPortsDetails(self, selected):
        global portsToBeFurtherScanned
        if(len(portsToBeFurtherScanned) > 0):

            self.thread = QThread()
            self.worker = PortScannerWorker(2)
            self.worker.moveToThread(self.thread)

            print(portsToBeFurtherScanned)
            

            self.thread.started.connect(
                partial(self.worker.run, selectedIP=selected, portList=portsToBeFurtherScanned.pop(), scanArgs='-n -sV -A')
                )
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.thread.wait)
            self.worker.progress.connect(
                    partial(self.portScanDone, selected)
                    )

            self.worker.finished.connect(self.stopLoadingAnimation)

            if(len(portsToBeFurtherScanned) > 0):
                self.worker.finished.connect(
                    partial(self.scanPortsDetails, selected))
                
            self.startLoadingAnimation()
            self.thread.start()
        else:
            pass


    #popup function, takes arg the message, title and icon style
    #############################################
    ######## POPUP FUNCTION THAT GETS AS PARAMS
    # ###### THE MESSAGE, TITLE AND ICON STYLE
    #  ##### ONLY HAS OK BUTTON FOR NOW ############
    #############################################
    def show_popup(self, message, title, icon):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(message)
        match icon:
            case 'warning':
                msg.setIcon(QMessageBox.Warning)
            case 'info':
                msg.setIcon(QMessageBox.Information)
            case 'question':
                msg.setIcon(QMessageBox.Question)
            case default:
                pass

        msg.setStandardButtons(QMessageBox.Ok)

        x = msg.exec_()



#################################################################################
    ######## WORKER CLASS THAT HELPS SEND SPECIFIC TASKS TO DIFFERENT THREADS###
    # HELPS WITH THE LOADING ANIMATION AND RESPONSITIVITY OF GUI    ############
    ############################################################################
class NetworkScanWorker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def __init__(self, id: int):
        super().__init__()
        self.__id = id
        self.__abort = False
    
    def run(self, network):
        global activeIPs
        activeIPs = doPingSweep(network)
        self.finished.emit()

class PortScannerWorker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal()

    def __init__(self, id: int):
        super().__init__()
        self.__id = id
        self.__abort = False
    
    def run(self, selectedIP, portStart=0, portEnd=1, portList=[], scanArgs=''):
        global portsDictionary
        try:
            portIncrement = 100
            while (portStart < portEnd):
                portsDictionary = scanPorts(selectedIP, portStart, portStart+portIncrement, portList=portList, scanArgs=scanArgs)
                self.progress.emit()
                # time.sleep(1)
                portStart += portIncrement
                portIncrement += 200
            self.finished.emit()
            # self.disconnect()

        except Exception as ex:
            print("Exception thrown in run of portScanner worker: ", ex)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

from warnings import catch_warnings
import vulners

vulners_api = vulners.VulnersApi(api_key="OAYN5M0MPFTY0TQ1UG3DC7PGFYBW2GQGDXW2IMOI3418AZ6LQYU7RX2TI70SVTJP")

class Vulnerability:
    def __init__(self, id, vulnerabilityType, title, score, description, severity, obtainAllPrivilege, exploitabilityScore):
        self.id = id
        self.type = vulnerabilityType
        self.title = title
        self.score = score
        self.description = description
        self.severity = severity
        self.obtainAllPrivilege = obtainAllPrivilege
        self.exploitabilityScore = exploitabilityScore

    def __str__(self) -> str:
        return (f"Id: {self.id} \nType: {self.type} \nTitle: {self.type}\nScore: {self.score}\nDescription: {self.description}\n")

    
class Exploit:
    def __init__(self, id, description, exploitType, title, cvss_score, vhref):
        self.id = id
        self.description = description
        self.type = exploitType
        self.title = title
        self.score = cvss_score
        self.link = vhref

    def __str__(self) -> str:
        return (f"Id: {self.id}\nTitle: {self.title}\nType: {self.type}\nScore: {self.score}\nDescription: {self.description}\n")

    def getUrl(self):
        return self.link

# def autocomplete_search(self):
#     possible_autocomplete = vulners_api.query_autocomplete("heartbleed")

#     heartbleed_related = vulners_api.find_all("heartbleed", limit=10)
#     total_heartbleed = heartbleed_related.total
#     # Notice you can do this because of Vulners' own AttributeList type
#     CVE_2017_14174 = vulners_api.document("CVE-2017-14174")


def software_scanner(product, version="*.*"):
    # Download web application vulnerability detection regex collection
    # rules = vulners_api.get_web_application_rules()
    try:

        # Plain text software + version example for Apache Httpd 1.3
        sw_results = vulners_api.get_software_vulnerabilities(product, version)
        
        sw_exploit_list = sw_results.get('exploit')
        sw_vulnerabilities_list = [sw_results.get(key) for key in sw_results if key not in ['info', 'blog', 'bugbounty']]
        # CPE vulnerability search example
        cpe_results = vulners_api.get_cpe_vulnerabilities("cpe:/a:Samba:smbd:*.*.*")
        cpe_exploit_list = cpe_results.get('exploit')
        cpe_vulnerabilities_list = [cpe_results.get(key) for key in cpe_results if key not in ['info', 'blog', 'bugbounty']]

        vuln_list = []

        for vuln in sw_vulnerabilities_list:
            if(type(vuln) == type([])):
                for vulnDetails in vuln:
                    vulnerability = Vulnerability(id=vulnDetails['id'], vulnerabilityType=vulnDetails['type'], title=vulnDetails['title'],
                        score=vulnDetails['cvss']['score'], description=vulnDetails['description'], severity=vulnDetails['cvss2']['severity'], 
                        obtainAllPrivilege=vulnDetails['cvss2']['obtainAllPrivilege'], exploitabilityScore=vulnDetails['cvss2']['exploitabilityScore'])

                    print(vulnerability.__str__())
                    vuln_list.append(vulnerability)

            elif(type(vuln) == type({})):
                vulnerability = Vulnerability(id=vuln['id'], vulnerabilityType=vuln['type'], title=vuln['title'],
                score=vuln['cvss']['score'], description=vuln['description'], severity=vuln['cvss2']['severity'], 
                obtainAllPrivilege=vuln['cvss2']['obtainAllPrivilege'], exploitabilityScore=vuln['cvss2']['exploitabilityScore'])

                print(vulnerability.__str__())
                vuln_list.append(vulnerability)

            else:
                print(vuln)

        found_exploits = vulners_api.find_exploit_all(product)
        expl_list = []
        for exp in found_exploits:
            exploit = Exploit(exp['id'], exp['description'], exp['type'], 
            exp['title'], exp['cvss']['score'], exp['vhref'])

            expl_list.append(exploit)

        return (vuln_list, expl_list)


        return vuln_list
    except Exception as ex:
        print("Exception in software_scan: ", ex)

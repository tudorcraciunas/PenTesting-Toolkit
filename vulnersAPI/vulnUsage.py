from warnings import catch_warnings
import vulners

vulners_api = vulners.VulnersApi(api_key="OAYN5M0MPFTY0TQ1UG3DC7PGFYBW2GQGDXW2IMOI3418AZ6LQYU7RX2TI70SVTJP")

class Vulnerability:
    def __init__(self, id, vulnerabilityType, title, score, description, severity, obtainAllPrivilege, exploitabilityScore):
        self.id = id
        self.type = vulnerabilityType
        self.title = title
        self.score = score
        self.description = description
        self.severity = severity
        self.obtainAllPrivilege = obtainAllPrivilege
        self.exploitabilityScore = exploitabilityScore

    def __str__(self) -> str:
        return (f"Id: {self.id} \nType: {self.type} \nTitle: {self.type}\nScore: {self.score}\nDescription: {self.description}\n")

    
class Exploit:
    def __init__(self, id, description, exploitType, title, cvss_score, vhref):
        self.id = id
        self.description = description
        self.type = exploitType
        self.title = title
        self.score = cvss_score
        self.link = vhref

    def __str__(self) -> str:
        return (f"Id: {self.id}\nTitle: {self.title}\nType: {self.type}\nScore: {self.score}\nDescription: {self.description}\n")

    def getUrl(self):
        return self.link
#TODO: vezi daca ai cum sa downloadezi exploits cu getsploit.

# def autocomplete_search(self):
#     possible_autocomplete = vulners_api.query_autocomplete("heartbleed")

#     heartbleed_related = vulners_api.find_all("heartbleed", limit=10)
#     total_heartbleed = heartbleed_related.total
#     # Notice you can do this because of Vulners' own AttributeList type
#     CVE_2017_14174 = vulners_api.document("CVE-2017-14174")
#     print("API STOPPED AND PRINTING NOW")
#     print(CVE_2017_14174)
#     print(total_heartbleed)

#     print("API STOPPED AND PRINTING NOW")

#TODO: would be cool to get rid of code is unreachable pylance
def software_scanner(product, version="*.*"):
    # Download web application vulnerability detection regex collection
    # rules = vulners_api.get_web_application_rules()
    try:

        # Plain text software + version example for Apache Httpd 1.3
        sw_results = vulners_api.get_software_vulnerabilities(product, version)
        
        sw_exploit_list = sw_results.get('exploit')
        sw_vulnerabilities_list = [sw_results.get(key) for key in sw_results if key not in ['info', 'blog', 'bugbounty']]
        # CPE vulnerability search example
        cpe_results = vulners_api.get_cpe_vulnerabilities("cpe:/a:Samba:smbd:*.*.*")
        cpe_exploit_list = cpe_results.get('exploit')
        cpe_vulnerabilities_list = [cpe_results.get(key) for key in cpe_results if key not in ['info', 'blog', 'bugbounty']]
        # print("CPE results VALUES######################################")
        # print(cpe_results.values())
        # print("CPE results ITEMS######################################")

        # print(cpe_results.items())
        # print("CPE results KEYS######################################")

        # print(cpe_results.keys())
        # print("FOR LOOP through results.values#####################################")
        # for result in cpe_results.values():
        #     print("NEXT ITERATION OF RESULTS.VALUES ###################################",result)


        # print("CPE VULNERABILITIES ######################################")
        # print(cpe_vulnerabilities_list)
        vuln_list = []

        for vuln in sw_vulnerabilities_list:
            print("NEXT ITERATION OF VULNERABILITIES ########################################")
            if(type(vuln) == type([])):
                for vulnDetails in vuln:
                    # print(f"Vulnerability :  {vulnDetails}")
                    vulnerability = Vulnerability(id=vulnDetails['id'], vulnerabilityType=vulnDetails['type'], title=vulnDetails['title'],
                    score=vulnDetails['cvss']['score'], description=vulnDetails['description'], severity=vulnDetails['cvss2']['severity'], 
                    obtainAllPrivilege=vulnDetails['cvss2']['obtainAllPrivilege'], exploitabilityScore=vulnDetails['cvss2']['exploitabilityScore'])
                    # print(f"Vulnerability id :  {vulnDetails['id']}")
                    # print(f"Vulnerability type :  {vulnDetails['type']}")
                    # print(f"Vulnerability title :  {vulnDetails['title']}")
                    # print(f"Vulnerability CVSS Meta score :  {vulnDetails['cvss']['score']}")

                    # print(f"Vulnerability bulletinFamily :  {vulnDetails['bulletinFamily']}")
                    # print(f"Vulnerability description :  {vulnDetails['description']}")
                    # print(f"Vulnerability severity :  {vulnDetails['cvss2']['severity']}")
                    # print(f"Vulnerability obtainAllPrivilege :  {vulnDetails['cvss2']['obtainAllPrivilege']}")
                    # print(f"Vulnerability exploitabilityScore :  {vulnDetails['cvss2']['exploitabilityScore']}")
                    print(vulnerability.__str__())
                    vuln_list.append(vulnerability)

            elif(type(vuln) == type({})):
                # print(f"Vulnerability :  {vuln}")
                vulnerability = Vulnerability(id=vuln['id'], vulnerabilityType=vuln['type'], title=vuln['title'],
                score=vuln['cvss']['score'], description=vuln['description'], severity=vuln['cvss2']['severity'], 
                obtainAllPrivilege=vuln['cvss2']['obtainAllPrivilege'], exploitabilityScore=vuln['cvss2']['exploitabilityScore'])

                # print(f"Vulnerability id :  {vuln['id']}")
                # print(f"Vulnerability type :  {vuln['type']}")
                # print(f"Vulnerability title :  {vuln['title']}")
                # print(f"Vulnerability bulletinFamily :  {vuln['bulletinFamily']}") 
                # print(f"Vulnerability description :  {vuln['description']}")
                # print(f"Vulnerability severity :  {vuln['cvss2']['severity']}")
                # print(f"Vulnerability obtainAllPrivilege :  {vuln['cvss2']['obtainAllPrivilege']}")
                # print(f"Vulnerability exploitabilityScore :  {vuln['cvss2']['exploitabilityScore']}")
                print(vulnerability.__str__())
                vuln_list.append(vulnerability)

            else:
                print(vuln)
                # print(f"Vulnerability id :  {vuln['id']}")
                # print(f"Vulnerability type :  {vuln['type']}")
                # print(f"Vulnerability bulletinFamily :  {vuln['bulletinFamily']}")
                # print(f"Vulnerability description :  {vuln['description']}")
                # print(f"Vulnerability severity :  {vuln['severity']}")
                # print(f"Vulnerability obtainAllPrivilege :  {vuln['obtainAllPrivilege']}")
                # print(f"Vulnerability exploitabilityScore :  {vuln['exploitabilityScore']}")

        print("#############################################")
        print("#############################################")
        print("#############################################")


        
        # for vuln in cpe_vulnerabilities_list:
        #     print("NEXT ITERATION OF VULNERABILITIES ########################################")
        #     print(f"Vulnerability id:  {vuln}")

        print("CPE exploits ######################################")
        print(cpe_exploit_list)

        print("SW exploits ######################################")
        print(sw_exploit_list)

        found_exploits = vulners_api.find_exploit_all(product)
        expl_list = []
        for exp in found_exploits:
            # print(exp)
            exploit = Exploit(exp['id'], exp['description'], exp['type'], 
            exp['title'], exp['cvss']['score'], exp['vhref'])

            expl_list.append(exploit)

        return (vuln_list, expl_list)


        return vuln_list
    except Exception as ex:
        print("Exception in software_scan: ", ex)

# software_scanner("apache httpd")
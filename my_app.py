from __future__ import unicode_literals
from ast import Str
from email.policy import default
import ipaddress
import multiprocessing
import os
import platform
import subprocess
import re
import nmap
from sys import stdout
subprocess.__file__




def myPing(job_q, results_q):
    DEVNULL = open(os.devnull, 'w')

    while True:
        ip = job_q.get()
        if ip is None:
            break

        try:
            parameter = '-n' if platform.system().lower()=='windows' else '-c'
            # print("Doing sweep1")

            result = subprocess.Popen(['ping', str(ip), parameter, '1', '-w', '10'],
                        stdout=subprocess.PIPE)
            # print(str(process))
            # print("Adding IP: " + str(ip))
            #print("First Result" + str(results_q.get()))

            out = result.communicate()
            val1 = result.returncode
            
            if val1 == 0:
                results_q.put(ip)
                
                print(f"{results_q.qsize()}: {ip} is pinging")
                
            # else:
            #     print(ip, "is not responding")
            #response = os.system("ping %s %s 1 > nul" %(ip, parameter))
            # if response == 0:192.168.0.
            #     print("%s is UP" %ip)
            # else:
            #     print("%s is DOWN" %ip)
        except Exception as inst:
            print("Exception was thrown in myPing(): " + str(inst))


def chooseIpToScanPorts(active_ips):
    port_range_pattern = re.compile("([0-9]+)-([0-9]+)")
    port_min = 0;
    port_max = 655355

    print("Please choose one of the open IPs to scan ports.")

    for i in range(len(active_ips)):
        print(f"{i}: {active_ips[i]}")
    ip_nr = input("Select the number of the ip:  ")

    ip = active_ips[int(ip_nr)]
    print("IP to check ports: ", ip)

    # You can scan 0-65535 ports. This scanner is basic and doesn't use multithreading so scanning all the ports is not advised.
    print("Please enter the range of ports you want to scan in format: <int>-<int> (ex would be 60-120)")
    port_range = input("Port range: ")
     # We pass the port numbers in by removing extra spaces that people sometimes enter. So if you enter 80 - 90 instead of 80-90 the program will still work.
    port_range_valid = port_range_pattern.search(port_range.replace(" ",""))

    if port_range_valid:
        # We're extracting the low end of the port scanner range the user want to scan.
        port_min = int(port_range_valid.group(1))
        # We're extracting the upper end of the port scanner range the user want to scan.
        port_max = int(port_range_valid.group(2))
    
    try:
        nm = nmap.PortScanner()
        result = nm.scan(str(ip), '21-200')
        print(nm.command_line())
        print(nm.scaninfo())
        print(nm.all_hosts())
        print(nm[str(ip)].hostname())
        print(nm[str(ip)].state())
        print(nm[str(ip)].all_protocols())
        print(nm[str(ip)]['tcp'].keys())
    except Exception as ex:
        print("NMAP Scan not completed: " + str(ex))

    for port in range(port_min, port_max):
        try:
            result = nm.scan(str(ip), str(port))
            port_status = (result['scan'][str(ip)]['tcp'][port]['state'])
            print(f"Port {port} is {port_status}")
        except Exception as ex:
            print(f"Cannot scan port {port} " + str(ex))


def scanPorts(ip_addr):
    port_min = 0
    port_max = 1025
    try:
        scanner = nmap.PortScanner()

        print("nmap version: ", scanner.nmap_version())
        scanner.scan(ip_addr,"20-100",'-v -sS -sV -sC -A -O') #the # are port range to scan, the last part is the scan type
        print(scanner.scaninfo())
        print("Scan complete\n")
        #if scanner.scaninfo()=='up':
        print("Ip Status: ",scanner[ip_addr].state())
        print("protocols: ",scanner[ip_addr].all_protocols())
        print("Open Ports: ",scanner[ip_addr]['tcp'].keys())  #display all open ports
    except Exception as error:
        print("Cannot scan port because of error: ", error)

def doPingSweep(network):
    pool_size = len(list(network.hosts()))
    jobs = multiprocessing.Queue()
    results = multiprocessing.Queue()

    pool = [ multiprocessing.Process(target=myPing, args=(jobs, results))
            for i in range(pool_size)]

    try:
        for p in pool:
            p.start()
        for i in network.hosts():
            jobs.put(i)        
        for p in pool:
            jobs.put(None)
        for p in pool:
            p.join()
        open_ips = 0
        active_ips = []
        print("Number of open Ips: ", results.qsize())
        for i in range(results.qsize()):
            ip = results.get()
            active_ips.append(ip)
        print("Ping complete.")  
    
        if(len(active_ips) > 0):
            return active_ips

    except Exception as ex:
        print("Exception thrown in doPingSweep(): " + str(ex)) 



# if __name__=='__main__':

#     while True:
#         IPrange = input("Give IP range to ping sweep: ")
#         try:
#             network = ipaddress.ip_network(str(IPrange))
#             if(len(list(network.hosts())) > 255 or len(list(network.hosts())) < 1):
#                 print("Network should contain between 1 and 255 hosts")
#                 continue
#             print("You entered a valid IP network or address")
#             break
#         except:
#             print("You entered an invalid ip address.")

#     print("Running Python ping sweep of target IP range " + IPrange)
#     #print("pool size should be: ", len(network.hosts()))

#     doPingSweep(network)

    
def getInput(networkInput):
    IPrange = networkInput
    try:
        network = ipaddress.ip_network(str(IPrange))
        if(len(list(network.hosts())) > 255 or len(list(network.hosts())) < 1):
            return 0
        return network
    except:
        return 0
        